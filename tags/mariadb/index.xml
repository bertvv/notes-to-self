<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mariadb on Notes to self</title><link>https://bertvv.github.io/notes-to-self/tags/mariadb/</link><description>Recent content in mariadb on Notes to self</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 16 Nov 2015 16:07:42 +0100</lastBuildDate><atom:link href="https://bertvv.github.io/notes-to-self/tags/mariadb/index.xml" rel="self" type="application/rss+xml"/><item><title>Automating `mysql_secure_installation`</title><link>https://bertvv.github.io/notes-to-self/2015/11/16/automating-mysql_secure_installation/</link><pubDate>Mon, 16 Nov 2015 16:07:42 +0100</pubDate><guid>https://bertvv.github.io/notes-to-self/2015/11/16/automating-mysql_secure_installation/</guid><description>&lt;p>Many HOWTO&amp;rsquo;s and blog posts about installing MySQL/MariaDB, a LAMP stack, etc. suggest to run the script &lt;code>mysql_secure_installation&lt;/code> to tighten the security holes in the default installation of the database engine. This includes setting a root password (empty by default), removing anonymous users, and deleting a test database. For a database server that you&amp;rsquo;re going to run in production, it is really important to do this. However, I have a problem with the fact that &lt;code>mysql_secure_installation&lt;/code> is interactive, i.e. it asks for user input. This makes it very hard to include it in an automated setup. In this post, we&amp;rsquo;ll discuss how the script works and how we can automate what it does.&lt;/p></description></item></channel></rss>